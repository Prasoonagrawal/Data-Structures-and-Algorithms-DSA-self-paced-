
using namespace std;

// A2 is made global here so that it can be accesed by compareByA2() 
// The syntax of qsort() allows only two parameters to compareByA2() 
int A2[1000001]; 
// int size = 5; // size of A2[] 

unordered_map<int, int> mp;

int search(int key) 
{ 
	
	if(mp.find(key) != mp.end()){
	    return mp[key];
	}
	
	return -1; 
} 

// A custom comapre method to compare elements of A1[] according 
// to the order defined by A2[]. 
int compareByA2(const void * a, const void * b) 
{ 
	int idx1 = search(*(int*)a); 
	int idx2 = search(*(int*)b); 
	if (idx1 != -1 && idx2 != -1) 
		return idx1 - idx2; 
	else if(idx1 != -1) 
		return -1; 
	else if(idx2 != -1) 
		return 1; 
	else
		return ( *(int*)a - *(int*)b ); 
} 

// This method mainly uses qsort to sort A1[] according to A2[] 
void sortA1ByA2(int A1[], int size1) 
{ 
	qsort(A1, size1, sizeof (int), compareByA2); 
} 

// Driver program to test above function 
int main(int argc, char *argv[]) 
{ 
	
	int t;
	
	cin >> t;
	
	while(t--){
	    
	    int n, m;
	    cin >> n >> m;
	    
	    int A1[n];
	    
	    for(int i = 0;i<n;i++){
	        cin >> A1[i];
	    }
	    
	    for(int i = 0;i<m;i++){
	        cin >> A2[i];
	        mp[A2[i]] = i;
	    }
	    
	    sortA1ByA2(A1, n); 
	
	    int i; 
	    for (i = 0; i < n; i++) 
		    printf("%d ", A1[i]);
		
	    cout << endl;
	    
	    mp.clear();
	    
	}
	
	// int size1 = sizeof(A1)/sizeof(A1[0]); 
		
	return 0; 
} 



// #include <bits/stdc++.h>
// #include <algorithm>
// using namespace std;
// int A1[100],A2[10]; 
// int first(int arr[], int low, int high, int x, int n)
// {
//     if (high >= low)
//     {
//         int mid = low + (high-low)/2;  
//         if ((mid == 0 || x > arr[mid-1]) && arr[mid] == x)
//             return mid;
//         if (x > arr[mid])
//             return first(arr, (mid + 1), high, x, n);
//         return first(arr, low, (mid -1), x, n);
//     }
//     return -1;
// }
 
// void sortAccording(int A1[], int A2[], int m, int n)
// {
//     int temp[m], visited[m];
//     for (int i=0; i<m; i++)
//     {
//         temp[i] = A1[i];
//         visited[i] = 0;
//     }
 
//     sort(temp, temp + m);
 
//     int ind = 0;
 
//     for (int i=0; i<n; i++)
//     {
//         int f = first(temp, 0, m-1, A2[i], m);
 
//         if (f == -1) continue;
 
//         for (int j = f; (j<m && temp[j]==A2[i]); j++)
//         {
//             A1[ind++] = temp[j];
//             visited[j] = 1;
//         }
//     }
 
//     for (int i=0; i<m; i++)
//         if (visited[i] == 0)
//             A1[ind++] = temp[i];
// }
 
// void printArray(int arr[], int n)
// {
//     for (int i=0; i<n; i++)
//         cout << arr[i] << " ";
//     cout << endl;
// }
 
// int main()
// {
// 	int t;
// 	cin>>t;
// 	while(t--)
// 	{
// 		int m,n,i;
// 		cin>>m>>n;
// 		for(i=0;i<m;i++)
// 		{
// 			cin>>A1[i];
// 		}
// 		for(i=0;i<n;i++)
// 		{
// 			cin>>A2[i];
// 		}
// 		sortAccording(A1, A2, m, n);
//     	printArray(A1, m);
// 	}
//     return 0;
// }
