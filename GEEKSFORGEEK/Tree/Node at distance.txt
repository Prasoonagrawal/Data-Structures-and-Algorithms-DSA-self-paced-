void kDistantFromLeafUtil(Node* node, int &counter, bool visited[],
						int pathLen, int k)
{
	// Base case
	if (node==NULL) return;

	/* append this Node to the path array */
	visited[pathLen] = false;
	pathLen++;

	/* it's a leaf, so print the ancestor at distance k only
	if the ancestor is not already printed */
	if (node->left == NULL && node->right == NULL &&
		pathLen-k-1 >= 0 && visited[pathLen-k-1] == false)
	{
		//cout << path[pathLen-k-1] << " ";
		counter++;
		visited[pathLen-k-1] = true;
		return;
	}

	/* If not leaf node, recur for left and right subtrees */
	kDistantFromLeafUtil(node->left, counter, visited, pathLen, k);
	kDistantFromLeafUtil(node->right, counter, visited, pathLen, k);
	
}
int printKDistantfromLeaf(Node* node, int k)
{
	int counter = 0;
	bool visited[MAX_HEIGHT] = {false};
	kDistantFromLeafUtil(node, counter, visited, 0, k);
	return counter;
}
