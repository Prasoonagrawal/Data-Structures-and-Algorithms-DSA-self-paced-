void bottomView(Node *root)
{
    if (root == NULL)
        return;

    // Initialize a variable 'hd' with 0
    // for the root element.
    int hd = 0;

    // TreeMap which stores key value pair
    // sorted on key value
    map<int, int> m;
    map<Node  *, int> mh;

    // Queue to store tree nodes in level
    // order traversal
    queue<Node *> q;

    // Assign initialized horizontal distance
    // value to root node and add it to the queue.
    mh[root] = hd;
    q.push(root);

    // Loop until the queue is empty (standard
    // level order loop)
    while (!q.empty())
    {
        Node *temp = q.front();
        q.pop();

        // Extract the horizontal distance value
        // from the dequeued tree node.
        hd = mh[temp];

        // Put the dequeued tree node to TreeMap
        // having key as horizontal distance. Every
        // time we find a node having same horizontal
        // distance we need to replace the data in
        // the map.
        m[hd] = temp->data;

        // If the dequeued node has a left child add
        // it to the queue with a horizontal distance hd-1.
        if (temp->left != NULL)
        {
            mh[temp->left] = hd-1;
            q.push(temp->left);
        }

        // If the dequeued node has a left child add
        // it to the queue with a horizontal distance
        // hd+1.
        if (temp->right != NULL)
        {
            mh[temp->right] = hd+1;
            q.push(temp->right);
        }
    }

    // Traverse the map elements using the iterator.
    for (map<int, int>::iterator i = m.begin(); i != m.end(); ++i)
        cout << i->second << " ";
}
